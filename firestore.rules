/**
 * @fileoverview Firestore Security Rules for LendEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data (loans, transactions, repayments),
 * with admin override capabilities. Vault data is strictly managed, and user data is protected.
 * All writes are protected by authorization checks.
 *
 * Data Structure:
 * - /vaults/{vaultId}: Stores overall financial data, access controlled.
 * - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 * - /users/{userId}/loans/{loanId}: Stores loan data, accessible only to the user and admins.
 * - /users/{userId}/loans/{loanId}/transactions/{transactionId}: Stores transaction data related to a loan, accessible only to the user and admins.
 * - /users/{userId}/loans/{loanId}/repayments/{repaymentId}: Stores repayment data related to a loan, accessible only to the user and admins.
 * - /roles_admin/{userId}: Presence grants admin privileges to the user.
 * - /diwali-users/{diwaliUserId}: Stores data for the Diwali savings scheme, accessible to any authenticated user.
 * - /loan-users/{loanUserId}: Stores data for loan users, accessible to any authenticated user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only access loan, transaction, and repayment data associated with their user ID.
 * - Admin users (those with a document in `/roles_admin/{userId}`) can bypass user ownership checks.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Authorization is based on the `userId` embedded in document paths.  No separate "memberships" collection is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of the /roles_admin/{userId} document.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource or an admin.
     */
    function isOwnerOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return false;
    }


    /**
     * @description Rules for the /vaults/{vaultId} collection. Only admins can create, update, or delete vaults. Anyone can read the vault data.
     * @path /vaults/{vaultId}
     * @allow (get, list): Any user can read vault data.
     * @allow (create, update, delete): Only an admin can modify vault data.
     * @deny (create, update, delete): A non-admin user cannot modify vault data.
     * @principle Enforces admin-only access for creating, updating, and deleting vaults.
     */
    match /vaults/{vaultId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection. Only the user and admins can read and write user data.
     * @path /users/{userId}
     * @allow (get): The user or an admin can read the user's data.
     * @allow (create): The user can create their own document, matching their auth UID.
     * @allow (update): The user or an admin can update the user's data, and the ID remains immutable.
     * @allow (delete): Only the user or an admin can delete the user.
     * @deny (create): A user cannot create a user document with an ID that does not match their auth UID.
     * @deny (update): A user or admin cannot change the user's ID.
     * @principle Enforces document ownership for writes, allows owner and admin to read the data.
     */
    match /users/{userId} {
      allow get: if isOwnerOrAdmin(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/loans/{loanId} collection. Only the user and admins can read and write loan data for that user.
     * @path /users/{userId}/loans/{loanId}
     * @allow (get, list): The user or an admin can read the loan data.
     * @allow (create): The user or an admin can create a loan, with the correct userId.
     * @allow (update): The user or an admin can update the loan data.
     * @allow (delete): The user or an admin can delete the loan data.
     * @deny (create): A user cannot create a loan for another user.
     * @principle Enforces document ownership for writes, allows owner and admin to read the data.
     */
    match /users/{userId}/loans/{loanId} {
      allow get, list: if isOwnerOrAdmin(userId);
      allow create: if isOwnerOrAdmin(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/loans/{loanId}/transactions/{transactionId} collection. Only the user and admins can read and write transaction data for that loan.
     * @path /users/{userId}/loans/{loanId}/transactions/{transactionId}
     * @allow (get, list): The user or an admin can read the transaction data.
     * @allow (create): The user or an admin can create a transaction, with the correct loanId.
     * @allow (update): The user or an admin can update the transaction data.
     * @allow (delete): The user or an admin can delete the transaction data.
     * @deny (create): A user cannot create a transaction for another loan.
     * @principle Enforces document ownership for writes, allows owner and admin to read the data.
     */
    match /users/{userId}/loans/{loanId}/transactions/{transactionId} {
      allow get, list: if isOwnerOrAdmin(userId);
      allow create: if isOwnerOrAdmin(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/loans/{loanId}/repayments/{repaymentId} collection. Only the user and admins can read and write repayment data for that loan.
     * @path /users/{userId}/loans/{loanId}/repayments/{repaymentId}
     * @allow (get, list): The user or an admin can read the repayment data.
     * @allow (create): The user or an admin can create a repayment, with the correct loanId.
     * @allow (update): The user or an admin can update the repayment data.
     * @allow (delete): The user or an admin can delete the repayment data.
     * @deny (create): A user cannot create a repayment for another loan.
     * @principle Enforces document ownership for writes, allows owner and admin to read the data.
     */
    match /users/{userId}/loans/{loanId}/repayments/{repaymentId} {
      allow get, list: if isOwnerOrAdmin(userId);
      allow create: if isOwnerOrAdmin(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /diwali-users/{diwaliUserId} collection.
     * Allows any authenticated user to read and write.
     * @path /diwali-users/{diwaliUserId}
     */
    match /diwali-users/{diwaliUserId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Rules for the /loan-users/{loanUserId} collection.
     * Allows any authenticated user to read and write.
     * @path /loan-users/{loanUserId}
     */
    match /loan-users/{loanUserId} {
        allow read, write: if isSignedIn();
    }

      /**
     * @description Rules for the /roles_admin/{userId} collection. Only admins can create admin roles.  Other users cannot read.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}
